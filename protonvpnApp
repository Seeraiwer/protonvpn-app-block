#!/bin/env bash

# Chemin du fichier log ProtonVPN
LOG_FILE="$HOME/.cache/Proton/VPN/logs/vpn-app.log"

# Lire le contenu du fichier de log
OUTPUT=$(tail -n 20 "$LOG_FILE")

# Définir la chaîne pour vérifier si aucune connexion VPN n'est active
DISCONNECTED='Disconnected'

# Vérifier si le contenu du log mentionne une déconnexion
if echo "$OUTPUT" | grep -q "$DISCONNECTED"; then
    echo "No VPN"
    echo "#FF0000"  # Rouge pour absence de VPN
    exit 0
fi

# Extraire l'adresse IP et le nom du serveur à partir de la sortie
NEW_IP=$(echo "$OUTPUT" | grep -oP 'IP:\s*\K[\d\.]+' | tail -n 1)
NEW_SERVER=$(echo "$OUTPUT" | grep -oP 'Server:\s*\K[^/ ]+' | tail -n 1)

# Vérifier si on a bien récupéré des valeurs valides (si pas de déconnexion)
if [[ -z "$NEW_IP" || -z "$NEW_SERVER" ]]; then
    echo "Connecting..."
    echo "#FFFF00"  # Jaune pour indiquer une connexion en cours
    exit 0
fi

# Vérifier la connexion internet avec un ping
PING_RESULT=$(ping -c 1 -W 1 8.8.8.8 2>/dev/null)

if [[ $? -ne 0 ]]; then
    echo "Bad connection"
    echo "#FF0000"  # Rouge pour connexion instable
    exit 1
fi

# Extraire le temps de réponse du ping
PING_TIME=$(echo "$PING_RESULT" | grep -oP 'time=\K[\d\.]+' | tail -n 1)

# Définir un seuil de latence
THRESHOLD=100

if [[ -n "$PING_TIME" && $(echo "$PING_TIME > $THRESHOLD" | bc -l) -eq 1 ]]; then
    echo "High latency: ${PING_TIME} ms"
    echo "#FF0000"  # Rouge pour latence élevée
else
    echo "$NEW_SERVER ($NEW_IP)"
    echo "#d335ff"  # Violet pour VPN actif
fi
